"""
A library of functions that facilitate the usage of Staff SSO in DIT.

The usage process is:

A user is redirected to the url generated by `get_login_url()`. The user will be
presented with all the authentication options provided by Staff SSO.
The setting defined in SSO_REDIRECT_URI determines the url the user will be redirected
to after a successful login.
The redirect URL carries with it a `code` query parameter.

The next step is to exchange the code with an access token by calling `get_access_token(code)`.
The result would be a dict containing the relevant tokens and authentication data for this user.

If the user's profile is required (email and name), a call to `get_profile(access_token)` would
return it.
"""
import requests
from django.conf import settings
from . import SSO_BROKER_URL, SSO_CLIENT_ID, SSO_CLIENT_SECRET, SSO_REDIRECT_URI


SSO_ENDPOINTS = {
    'authorize': '/o/authorize/',
    'token': '/o/token/',
    'profile': '/api/v1/user/me/',
}


def get_login_url():
    """
    Generate the login page url for Staff SSO
    """
    login_url = (
        f"{SSO_BROKER_URL}{SSO_ENDPOINTS['authorize']}?redirect_uri="
        f"{SSO_REDIRECT_URI}&client_id={SSO_CLIENT_ID}"
        f"&client_secret={SSO_CLIENT_SECRET}"
        f"&response_type=code"
    )
    return login_url


def get_access_token(code):
    """
    Exchange the code for an access token
    """
    response_data = None
    response = requests.post(url=f"{SSO_BROKER_URL}{SSO_ENDPOINTS['token']}", data={
        'client_id': SSO_CLIENT_ID,
        'client_secret': SSO_CLIENT_SECRET,
        'response_type': 'code',
        'code': code,
        'redirect_uri': SSO_REDIRECT_URI,
        'grant_type': 'authorization_code',
    })
    if response.status_code == 200:
        response_data = response.json()
    return response_data


def get_profile(access_token):
    """
    Return the user's profile information (email, first/last name).
    """
    profile = None
    profile_url = f"{SSO_BROKER_URL}{SSO_ENDPOINTS['profile']}"
    response = requests.get(profile_url, headers={
        'Authorization': f'Bearer {access_token}'
    })
    if response.status_code == 200:
        profile = response.json()
    return profile


def is_authenticated(access_token):
    """
    Returns True or False denoting if the user is currently authenticated with SSO
    """
    return bool(get(access_token))
